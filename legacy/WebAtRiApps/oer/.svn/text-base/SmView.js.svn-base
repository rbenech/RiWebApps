 
/**Returns a string representation of the provided item.
  * Renders arrays, and objects as comma separated. 
  * If the given item is an riString (or contains riStrings): shows it as the 'text' component.
  * Everything else is just treated as a string. 
  * */
function getAsString(data) {
  if(!data) return ''; //nothing
  if(data instanceof Object) { //if get an array or object, show the contents as comma separated
    var a='';
    var firstTime=true; //for leading comma suppression
    for(var ndx in data) {
      if(!firstTime) a+= ', '; 
      firstTime=false;
      if(data[ndx].text) 
        a+=data[ndx].text //riString
      else a+=data[ndx];
    }
    return a;
  }
  if(data.text) 
    return data.text //riString
  return data;  //everything else
}

/**Returns the given sm as a single row in a table*/
function formatAnSm(sm) {
  var a='<tr>'+
        '<td>'+getAsString(sm.DST)+'</td>'+
        '<td>'+getAsString(sm.SRC)+'</td>'+
        '<td>'+sm.CHANNEL+'</td>';
  var msgs = sm.MSGS; //array of messages, each has an array of sub messages
  for(var msgNdx in msgs) { //for each Msg
    var submsg = msgs[msgNdx];
    var firstEntry=true;
    for(var submsgNdx in submsg) { //for each sub-msg
      a+='<td>';
      if(firstEntry) a+='<strong>';
      a+=getAsString(submsg[submsgNdx]); //renders arrays, objects riStrings etc in a viewable form
      if(firstEntry) a+='</strong>';
      firstEntry=false;
      a+='</td>';
    }
  }
  a+='</tr>';
  return a;
}

/*Given a list of SM data messages, returns an html formatted table*/
function formatSmDataList(smData) {
  if(!smData) return '';
  var smCnt = smData.length || 1; //either it's an array or a single entry

  var a='';
  //a=a+'<strong>Raw Data:</strong>'+smData+<br />; //debug

  a+='<p><h3 align="center">'+smCnt+' SM Packet(s)</h3></p>\n'+
     '<table border="1" align="center">'+
     '<tr>'+
     '<td>Dest</td>'+
     '<td>Src</td>'+
     '<td>Channel</td>'+
     '<td>Messages</td>'+
     '</tr>';
  if(smData instanceof Array) { //given an array of SM's
    for(var smNdx in smData) //for each SM
      a+=formatAnSm(smData[smNdx]);
  }
  else //assume is a single sm instead of an array 
    a+=formatAnSm(smData);
  a+='</table>';
  return a;
}

/*Creates and returns the XML HTTP Request object. Tries all known ways*/
function getHttpReqObject() {
  try { return new XMLHttpRequest(); } catch(e) {} //for all browsers except older (pre IE7) Internet Explorer
  try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {} //older IE has two ways, try them both 
  try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
  alert('Unable to set up ajax (XmlHttpRequest object). Browser too old?');
  return null; 
}

/*Query and load SM data from server*/
function loadIt() {
  var xhr = getHttpReqObject();
  xhr.open('GET',  'http://localhost:7501/guru/sm?', true);
  //xhr.open("POST","name.asp",true); //sample POST
  //xhr.send("A=aa&B=bb"); //sample POST data
  xhr.setRequestHeader('Accept', 'application/json');
  xhr.onreadystatechange = function() {
    if(xhr.readyState==4) { //0=Uninitialized, 1=Loading, 2=Loaded, 3=Interactive, 4=Completed
      if(xhr.status==200) { //received ok
        //var sub1=["aa","bb","cc"]; msgs=[sub1,sub1]; sm1={"CHANNEL":"ch","SRC":"sss","DST":"ddd","MSGS":msgs}; sm2={"CHANNEL":"ch","SRC":"sss","DST":"ddd","MSGS":msgs}; smList = [sm1, sm2];
        //var smList = [{"CHANNEL":"ch","SRC":"sss","DST":"ddd","MSGS":[["aa","bb","cc"],["aa","bb","cc"]]},{"CHANNEL":"ch","SRC":"sss","DST":"ddd","MSGS":[["aa","bb","cc"],["aa","bb","cc"]]}];
        var resp = xhr.responseText;
        //var smList = eval(resp); //this has issue with a single object return: Invalid character ':'
        var smList = eval('['+resp+']')[0]; //hack to address issue with single object return
        document.getElementById("adiv").innerHTML = formatSmDataList(smList);
      }
      else alert('-->Ajax receive Error: '+xhr.statusText); //error occurred
    }
  }
  xhr.send(null);
}
